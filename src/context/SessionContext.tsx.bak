import React, { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { Session, User } from "@supabase/supabase-js";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";
import { showSuccess, showError } from "@/utils/toast";

// Define the Profile interface
interface Profile {
  id: string;
  first_name: string | null;
  last_name: string | null;
  avatar_url: string | null;
  updated_at: string | null;
}

interface SessionContextType {
  session: Session | null;
  user: User | null;
  profile: Profile | null; // Add profile to context
  isLoading: boolean;
  signOut: () => Promise<void>;
  updateProfile: (newProfileData: Partial<Profile>) => Promise<void>; // Add updateProfile function
}

const SessionContext = createContext<SessionContextType | undefined>(undefined);

export const SessionContextProvider = ({ children }: { children: ReactNode }) => {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null); // State for profile
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  const fetchProfile = async (userId: string) => {
    const { data, error } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", userId)
      .single();

    if (error) {
      console.error("Error fetching profile:", error);
      // It's possible a profile doesn't exist immediately after signup,
      // or if the user was created before the trigger was set up.
      // We don't want to show an error toast here, just set profile to null.
      setProfile(null);
    } else {
      setProfile(data as Profile);
    }
  };

  useEffect(() => {
    let isMounted = true;
    
    // Initialize auth state once on mount
    const initializeAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!isMounted) return;
      
      setSession(session);
      setUser(session?.user || null);
      
      if (session?.user) {
        await fetchProfile(session.user.id);
      } else {
        setProfile(null);
      }
      
      setIsLoading(false);
    };

    // Handle auth state changes after initialization
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, currentSession) => {
        if (!isMounted) return;
        
        setSession(currentSession);
        setUser(currentSession?.user || null);

        if (currentSession?.user) {
          await fetchProfile(currentSession.user.id);
        } else {
          setProfile(null);
        }

        // Handle navigation events
        if (event === "SIGNED_IN") {
          showSuccess("Has iniciado sesi贸n exitosamente.");
          navigate("/dashboard");
        } else if (event === "SIGNED_OUT") {
          showSuccess("Has cerrado sesi贸n.");
          navigate("/login");
        } else if (event === "USER_UPDATED") {
          // Profile refresh is already handled above
        }
      }
    );

    // Initialize auth state
    initializeAuth();

    return () => {
      isMounted = false;
      subscription.unsubscribe();
    };
  }, [navigate]);

  const signOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        throw error;
      }
      // onAuthStateChange will handle navigation and success message
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      showError("Error al cerrar sesi贸n: " + errorMessage);
      console.error("Error signing out:", error);
      
      // Force logout on error - clear local state
      setSession(null);
      setUser(null);
      setProfile(null);
      navigate("/login");
    }
  };

  const updateProfile = async (newProfileData: Partial<Profile>) => {
    if (!user) {
      showError("Debes iniciar sesi贸n para actualizar tu perfil.");
      return;
    }
    try {
      const { error, data } = await supabase
        .from("profiles")
        .update(newProfileData)
        .eq("id", user.id)
        .select()
        .single();

      if (error) throw error;

      setProfile((prev) => (prev ? { ...prev, ...data } : data as Profile));
      showSuccess("Perfil actualizado exitosamente.");
      return data;
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      showError("Error al actualizar el perfil: " + errorMessage);
      console.error("Error updating profile:", error);
      throw error; // Re-throw to allow form to handle errors
    }
  };

  return (
    <SessionContext.Provider value={{ session, user, profile, isLoading, signOut, updateProfile }}>
      {children}
    </SessionContext.Provider>
  );
};

export const useSession = () => {
  const context = useContext(SessionContext);
  if (context === undefined) {
    throw new Error("useSession must be used within a SessionContextProvider");
  }
  return context;
};